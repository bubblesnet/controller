
mixin picture( bubbles )
    tr
        td( colspan="4" ) Picture as of #{moment(new Date(bubbles[0].currentPictureMillis)).format("ddd MMM DD hh:mm:ss a")}
    tr
        td( colspan="4" )
            img( width="100%" src="/picture/" + bubbles[0].userid + "/" + bubbles[0].deviceid + "/" + bubbles[0].currentPictureFilename )

mixin dateHeader( bubbles )
  h1 Growbox Status as of #{moment(new Date(bubbles[0].measured_datetimemillis)).fromNow()}
  p #{moment(new Date(bubbles[0].measured_datetimemillis)).format("ddd MMM DD hh:mm:ss a")}

mixin userAndDevice( bubbles )
    tr
      td User/Device
      td #{bubbles[0].userid + "/" + bubbles[0].deviceid}
      td #{bubbles[0].ipaddress}

mixin diskStatus( bubbles )
    tr
      td Disk Status
      td #{bubbles[0].diskfreespace}

mixin statusTableRow( col1, col2, col3, col4 )
    tr
        td #{col1}
        td #{col2}
        td #{col3}
        td #{col4}

mixin proximitySwitchMonitoredSensorRow( proximitySwitchMonitoredSensor, type )
    if proximitySwitchMonitoredSensor
        if proximitySwitchMonitoredSensor.lastevent
          +statusTableRow( proximitySwitchMonitoredSensor.container + ' ' + type, proximitySwitchMonitoredSensor.state, '', proximitySwitchMonitoredSensor.lastevent.type + ' ' + moment(new Date(proximitySwitchMonitoredSensor.lastevent.datetimemillis)).fromNow() )
        else
          +statusTableRow( proximitySwitchMonitoredSensor.container + ' ' + type, proximitySwitchMonitoredSensor.state, '', moment(new Date(proximitySwitchMonitoredSensor.measured_datetimemillis)).fromNow() )

mixin humidityMonitoredSensorRow( monitoredSensor, name )
    if monitoredSensor
        if monitoredSensor.measured_datetimemillis > 0
            +statusTableRow( name, sprintf("%.2f%%",monitoredSensor.value) , empty, moment( new Date(monitoredSensor.measured_datetimemillis)).fromNow() )
        else
            +statusTableRow( name, "DISABLED", '', '' )

mixin monitoredSensorRow( monitoredSensor, name )
    if monitoredSensor
        if monitoredSensor.measured_datetimemillis > 0
            +statusTableRow( name, monitoredSensor.value, '', moment( new Date(monitoredSensor.measured_datetimemillis)).fromNow() )
        else
            +statusTableRow( name, "DISABLED", '', '')

mixin distanceMonitoredSensorRow( monitoredSensor, name )
    if monitoredSensor
        if monitoredSensor.measured_datetimemillis > 0
            +statusTableRow( name, sprintf( "%.1f %s", monitoredSensor.value, monitoredSensor.units), '', moment( new Date(monitoredSensor.measured_datetimemillis)).fromNow() )
        else
            +statusTableRow( name, "DISABLED", '', '')

mixin lightIntensityMonitoredSensorRow( monitoredSensor, name )
    if monitoredSensor
        if monitoredSensor.measured_datetimemillis > 0
            +statusTableRow( name, sprintf( "%.1f %s", monitoredSensor.value, monitoredSensor.units), '', moment( new Date(monitoredSensor.measured_datetimemillis)).fromNow() )
        else
            +statusTableRow( name, "DISABLED", '', '')

mixin atmosphericPressureMonitoredSensorRow( monitoredSensor, name )
    if monitoredSensor
        +statusTableRow( name, units.formattedAtmosphericPressure(monitoredSensor), '', moment(new Date(monitoredSensor.measured_datetimemillis)).fromNow() )

mixin waterLevelMonitoredSensorRow( monitoredSensor, name )
    if monitoredSensor
        +statusTableRow( name, units.formattedWaterLevel(monitoredSensor), '', moment(new Date(monitoredSensor.measured_datetimemillis)).fromNow() )

mixin temperatureMonitoredSensorRow( temperatureMonitoredSensor )
    if temperatureMonitoredSensor
        +statusTableRow( temperatureMonitoredSensor.medium + ' Temp at ' + temperatureMonitoredSensor.location + '-' + temperatureMonitoredSensor.container, units.formattedTemperature(temperatureMonitoredSensor).value + ' ' + units.formattedTemperature(temperatureMonitoredSensor).units, '', moment(new Date(temperatureMonitoredSensor.measured_datetimemillis)).fromNow() )

mixin mostRecentEvents( events )
    if events
        +recentEvent( events[0] )
        +recentEvent( events[1] )
        +recentEvent( events[2] )
        +recentEvent( events[3] )
        +recentEvent( events[4] )
        +recentEvent( events[5] )
        +recentEvent( events[6] )
        +recentEvent( events[7] )
        +recentEvent( events[8] )
        +recentEvent( events[9] )
        +recentEvent( events[10] )
        +recentEvent( events[11] )
        +recentEvent( events[12] )
        +recentEvent( events[13] )
        +recentEvent( events[14] )
        +recentEvent( events[15] )
        +recentEvent( events[16] )
        +recentEvent( events[17] )
        +recentEvent( events[18] )
        +recentEvent( events[19] )

mixin recentEvent( event )
    tr
        if event
            td #{event.eventid}
            td #{event.message} #{event.stringvalue}
            td #{moment(new Date(event.datetimemillis)).format("ddd MMM DD hh:mm:ss a")}

mixin fanMonitoredDeviceRow( thing1,fanMonitoredDevice )
    tr
      if fanMonitoredDevice
        td #{fanMonitoredDevice.name}
        td
            a( href='/command/' + thing1.userid +'/' + thing1.deviceid + '/' + fanMonitoredDevice.name + '/' + fanMonitoredDevice.onofftoggle )
                button #{fanMonitoredDevice.onofftoggle}
        if fanMonitoredDevice.powerrating
            td #{fanMonitoredDevice.powerrating.value} #{fanMonitoredDevice.powerrating.units} per #{fanMonitoredDevice.powerrating.pertime}
        if fanMonitoredDevice.lastevent
            td #{fanMonitoredDevice.lastevent.type} #{moment(new Date(fanMonitoredDevice.lastevent.datetimemillis)).fromNow()}
        else
            if fanMonitoredDevice.lastevent
                td #{fanMonitoredDevice.lastevent.type} #{moment(new Date(fanMonitoredDevice.measured_datetimemillis)).fromNow()}

mixin waterPumpMonitoredDeviceRow( thing1,pumpMonitoredDevice )
    tr
        td #{pumpMonitoredDevice.name}
        td
            a( href="/command/" + thing1.userid + "/" + thing1.deviceid + "/" + pumpMonitoredDevice.name + "/" + pumpMonitoredDevice.onofftoggle )
                button #{pumpMonitoredDevice.onofftoggle}
        if pumpMonitoredDevice.waterFlowVolume
            td #{pumpMonitoredDevice.waterFlowVolume.value} #{pumpMonitoredDevice.waterFlowVolume.units} per #{pumpMonitoredDevice.waterFlowVolume.pertime}
        if pumpMonitoredDevice.lastevent
            td #{pumpMonitoredDevice.lastevent.type} #{moment(new Date(pumpMonitoredDevice.measured_datetimemillis)).fromNow()}

mixin airPumpMonitoredDeviceRow( thing1,pumpMonitoredDevice )
    tr
        td #{pumpMonitoredDevice.name}
        td
            a( href="/command/" + thing1.userid + "/" + thing1.deviceid + "/" + pumpMonitoredDevice.name + "/" + pumpMonitoredDevice.onofftoggle )
                button #{pumpMonitoredDevice.onofftoggle}
        if pumpMonitoredDevice.airFlowVolume
            td #{pumpMonitoredDevice.airFlowVolume.value} #{pumpMonitoredDevice.airFlowVolume.units} per #{pumpMonitoredDevice.airFlowVolume.pertime}
        if pumpMonitoredDevice.lastevent
            td #{pumpMonitoredDevice.lastevent.type} #{moment(new Date(pumpMonitoredDevice.measured_datetimemillis)).fromNow()}

mixin lightMonitoredDeviceRow( thing1,lightMonitoredDevice )
    tr
      if lightMonitoredDevice
        td #{lightMonitoredDevice.name}
        td
            a( href="/command/" + thing1.userid + "/" + thing1.deviceid + "/" + lightMonitoredDevice.name + "/" + lightMonitoredDevice.onofftoggle )
                button #{lightMonitoredDevice.onofftoggle}
        td #{lightMonitoredDevice.powerrating} #{lightMonitoredDevice.units} #{lightMonitoredDevice.tech}
        td #{moment(new Date(lightMonitoredDevice.measured_datetimemillis)).fromNow()}

mixin humidifierMonitoredDeviceRow( thing1, humidifierMonitoredDevice )
    tr
        td #{humidifierMonitoredDevice.name}
        td
            a( href="/command/" + thing1.userid + "/" + thing1.deviceid + "/" + humidifierMonitoredDevice.name + "/" + humidifierMonitoredDevice.onofftoggle )
                button #{humidifierMonitoredDevice.onofftoggle}
        td #{humidifierMonitoredDevice.vaporization_rate} #{humidifierMonitoredDevice.vaporization_units} per #{humidifierMonitoredDevice.vaporization_pertime}
        if humidifierMonitoredDevice.lastevent
            td #{humidifierMonitoredDevice.lastevent.type} #{moment(new Date(humidifierMonitoredDevice.lastevent.datetimemillis)).fromNow()}
        else
            td #{moment(new Date(humidifierMonitoredDevice.measured_datetimemillis)).fromNow()}
